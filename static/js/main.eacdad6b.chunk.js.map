{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/About.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","text","HtmlFor","onChange","TextForm","useState","setText","style","color","heading","forName","value","backgroundColor","event","console","log","target","rows","disabled","length","newText","toUpperCase","toLowerCase","split","filter","element","About","myStyle","border","borderColor","defaultProps","Alert","height","alert","role","words","lower","charAt","slice","capitalised","Type","msg","App","setMode","setAlert","alertstats","message","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oOAKe,SAASA,EAAOC,GAC7B,OACE,mCACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SAAuCH,EAAMI,QAC7C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkB,eAAa,OAAOE,GAAG,IAAzD,SAA8DH,EAAMO,UAEtE,oBAAIN,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,SAA9B,wBAKJ,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,QAAU,SAAlF,UACE,uBAAOD,UAAU,mBAAmBO,QAASR,EAAMS,WAAYJ,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAS,qBAA+B,UAAfD,EAAMU,KAAmB,QAAU,SAAWC,QAAQ,yBAAyBC,SAAUZ,EAAMU,KAA/H,SAAsIV,EAAMU,oBCrB1I,SAASG,EAASb,GAE9B,IAwBJ,EAAuBc,mBAAS,kBAAhC,mBAAOJ,EAAP,KAAYK,EAAZ,KAEA,OACA,qCACA,oBAAId,UAAU,WAAWe,MAAO,CAACC,MAAqB,SAAdjB,EAAME,KAAgB,QAAQ,SAAtE,SAAiFF,EAAMkB,UACvF,sBAAKjB,UAAU,QAAQe,MAAO,CAACC,MAAqB,SAAdjB,EAAME,KAAgB,QAAQ,SAApE,UACE,uBAAOiB,QAAQ,8BAA8BlB,UAAU,sBAAvD,SAA6E,mCAAK,0DAAL,UAC7E,0BAAUA,UAAU,uBAAuBmB,MAAOV,EAAMM,MAAO,CAACK,gBAA+B,SAAdrB,EAAME,KAAgB,UAAU,SAAUU,SAjBnG,SAACU,GACnBC,QAAQC,IAAI,SACZT,EAAQO,EAAMG,OAAOL,QAe0Hd,GAAG,QAAQoB,KAAK,SAEvK,gCACI,wBAASC,SAAwB,IAAdjB,EAAKkB,OAAY3B,UAAU,2BAA2BO,QAlCpD,WAEjBe,QAAQC,IAAI,uBACZ,IAAIK,EAAQnB,EAAKoB,cACjBf,EAAQc,IA8BZ,8BACA,wBAASF,SAAwB,IAAdjB,EAAKkB,OAAY3B,UAAU,uBAAuBO,QA5B/C,WAElBe,QAAQC,IAAI,uBACZ,IAAIK,EAAQnB,EAAKqB,cACjBhB,EAAQc,IAwBZ,8BACA,wBAASF,SAAwB,IAAdjB,EAAKkB,OAAY3B,UAAU,uBAAuBO,QAjB/C,WAClBe,QAAQC,IAAI,SACZT,EAAQ,MAeZ,0BAGJ,sBAAKd,UAAU,0BAA0Be,MAAO,CAACC,MAAqB,SAAdjB,EAAME,KAAgB,QAAQ,SAAtF,UACA,mDACA,8BAAIQ,EAAKsB,MAAM,KAAKC,QAAO,SAACC,GAC5B,OAAyB,IAAlBA,EAAQN,UACZA,OAFH,cAEsBlB,EAAKkB,OAF3B,iBAGA,8BAAK,KAAQlB,EAAKsB,MAAM,KAAKJ,OAA7B,kBACA,yCACA,qBAAK3B,UAAU,MAAf,SACCS,EAAKkB,OAAO,EAAElB,EAAK,8BCrDL,SAASyB,EAAMnC,GAS9B,IAAIoC,EAAQ,CACRnB,MAAoB,SAAdjB,EAAME,KAAe,QAAQ,UACnCmB,gBAA+B,SAAdrB,EAAME,KAAe,UAAU,QAChDmC,OAAQ,YACRC,YAA0B,SAAdtC,EAAME,KAAe,QAAQ,SAoBzC,OACI,sBAAKD,UAAU,SAAf,UACI,sBAAKA,UAAU,YAAYK,GAAG,mBAAmBU,MAAOoB,EAAxD,UACI,sBAAKnC,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,mBAAmBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAcW,MAAOoB,EAAnK,iCAIJ,qBAAK9B,GAAG,cAAcL,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAAoBe,MAAOoB,EAA1I,SACI,sBAAKnC,UAAU,iBAAf,UACI,8EADJ,qXAC+a,mDAD/a,uDAKR,sBAAKA,UAAU,iBAAiBe,MAAOoB,EAAvC,UACI,oBAAInC,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,6BAA6BI,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAcW,MAAOoB,EAA9K,iCAIJ,qBAAK9B,GAAG,cAAcL,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAAoBe,MAAOoB,EAArI,SACI,sBAAKnC,UAAU,iBAAf,UACI,+EADJ,sXACib,mDADjb,uDAKR,sBAAKA,UAAU,iBAAiBe,MAAOoB,EAAvC,UACI,oBAAInC,UAAU,mBAAmBK,GAAG,eAApC,SACI,wBAAQL,UAAU,6BAA6BI,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAgBW,MAAOoB,EAAlL,iCAIJ,qBAAK9B,GAAG,gBAAgBL,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAAoBe,MAAOoB,EAAzI,SACI,sBAAKnC,UAAU,iBAAf,UACI,8EADJ,sXACgb,mDADhb,0DAMZ,qBAAKA,UAAU,YFjC3BF,EAAOwC,aAAe,CACpBhC,MAAO,QGvBMiC,MAlBf,SAAexC,GAQX,OACD,qBAAKgB,MAAO,CAACyB,OAAO,QAApB,SACEzC,EAAM0C,OAAS,sBAAKzC,UAAU,kDAAkD0C,KAAK,QAAtE,UACpB,mCAToB,SAACC,GACjB,IAAMC,EAAMD,EAAMb,cAElB,OAAOc,EAAMC,OAAO,GAAGhB,cAAgBe,EAAME,MAAM,GAM9CC,CAAYhD,EAAM0C,MAAMO,MAAjC,OAAkDjD,EAAM0C,MAAMQ,U,OCgE/CC,MA9Df,WACE,MAAwBrC,mBAAS,SAAjC,mBAAOZ,EAAP,KAAakD,EAAb,KACA,EAA0BtC,mBAAS,MAAnC,mBAAO4B,EAAP,KAAcW,EAAd,KACA,EAAwBvC,mBAAS,oBAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KAoBMuC,EAAa,SAACC,EAASlD,GAE3BgD,EAAS,CACPH,IAAKK,EACLN,KAAM5C,IAGRmD,YAAW,WACTH,EAAS,QACR,OAGL,OACE,mCAEE,eAAC,IAAD,WAEE,cAACtD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMO,WAhCzB,WACJ,UAATP,GACFkD,EAAQ,QACRK,SAASC,KAAK1C,MAAMK,gBAAkB,WACtCiC,EAAW,uBAAwB,WACnCvC,EAAQ,uBAGRqC,EAAQ,SACRK,SAASC,KAAK1C,MAAMK,gBAAkB,QACtCiC,EAAW,wBAAyB,WACpCvC,EAAQ,sBAqBwDL,KAAMA,IACpE,cAAC,EAAD,CAAOgC,MAAOA,IACd,qBAAKzC,UAAU,iBAAf,SACA,eAAC,IAAD,WAEE,cAAC,IAAD,CAAO0D,KAAK,SAAZ,SACE,cAACxB,EAAD,CAAOjC,KAAMA,MAEf,cAAC,IAAD,CAAOyD,KAAK,IAAZ,SACE,cAAC9C,EAAD,CAAUK,QAAQ,sBAAsBhB,KAAMA,iBCpD3C0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.eacdad6b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.about}</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">About</Link>\r\n              </li>\r\n            </ul>\r\n\r\n\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'black' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className={`form-check-${props.text === 'light' ? 'black' : 'light'}`} HtmlFor=\"flexSwitchCheckDefault\" onChange={props.text}>{props.text}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  about: 'Home',\r\n};\r\n\r\n","import React, {useState} from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nexport  default function TextForm(props){\r\n    \r\n    const handleUpClick= ()=>{\r\n     \r\n        console.log(\"Uppercase was click\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    \r\n    const handleUpClick1= ()=>{\r\n     \r\n        console.log(\"Uppercase was click\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleOnChange= (event)=>{\r\n        console.log(\"click\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClearText=()=>{\r\n        console.log(\"clear\");\r\n        setText(\" \");\r\n    }\r\n\r\nconst [text,setText] = useState(\"Enter the text\");\r\n    \r\nreturn(\r\n<>\r\n<h1 className=\"textType\" style={{color :props.mode ==='dark'? 'white':'black'}}>{props.heading}</h1>\r\n<div className=\"mb-3 \" style={{color :props.mode ==='dark'? 'white':'black'}}>\r\n  <label forName=\"exampleFormControlTextarea1\" className=\"form-label textType\"><h3> <center>   Example textarea </center>  </h3></label>\r\n  <textarea className=\"form-control create \" value={text} style={{backgroundColor: props.mode ==='dark'? '#574ba2':'white'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<div>\r\n    <button  disabled={text.length===0} className=\"btn btn-primary textform\" onClick={handleUpClick}>ConvertUppercase</button>\r\n    <button  disabled={text.length===0} className=\"btn btn-primary mx-2\" onClick={handleUpClick1}>ConvertLowerCase</button>\r\n    <button  disabled={text.length===0} className=\"btn btn-primary mx-2\" onClick={handleClearText}>ClearText</button>\r\n</div>\r\n\r\n<div className=\"container my-2 textType\" style={{color :props.mode ==='dark'? 'white':'black'}}>\r\n<h1>Your text summary</h1>\r\n<p>{text.split(\" \").filter((element)=>{\r\nreturn element.length !==0\r\n}).length} words and {text.length} characters</p>\r\n<p>{(0.008 * text.split(\" \").length)}Minutes Read</p>\r\n<h2>Preview</h2>\r\n<div className=\"imp\">\r\n{text.length>0?text:\"Nothing to preview!\"}\r\n</div>\r\n\r\n</div>\r\n</>\r\n);\r\n\r\n}","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    // const[myStyle,setMyStyle]=useState({\r\n    //     color:'black',\r\n    //     backgroundColor:'white'\r\n    // })\r\n\r\n    // const [btnText, setbtnText] = useState('Enable Dark Mode');\r\n\r\n\r\nlet myStyle={\r\n    color:props.mode ==='dark'?'white':'#1e3677',\r\n    backgroundColor: props.mode ==='dark'?'#1e3677':'white',\r\n    border: '1px solid',\r\n    borderColor:props.mode ==='dark'?'white':'black'\r\n}\r\n\r\n\r\n// const toggleStyle=()=>{\r\n//    if(myStyle.color === 'white'){\r\n//        setMyStyle({\r\n//         color:'black',\r\n//         backgroundColor:'white'\r\n//        })\r\n//        setbtnText('Enable Dark Mode');\r\n//    }else{\r\n//        setMyStyle({\r\n//            color:'white',\r\n//            backgroundColor:'black'\r\n//        })\r\n//        setbtnText('Enable Light Mode');\r\n//    }\r\n// }\r\n  \r\n    return (\r\n        <div className=\"change\">\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"my-3\">\r\n            {/* <button type=\"button \" className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props){\r\n\r\nconst capitalised = (words)=>{\r\n    const lower=words.toLowerCase();\r\n\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n}\r\n\r\n    return(\r\n   <div style={{height:'30px'}}>\r\n    {props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n<strong>{capitalised(props.alert.Type)} </strong>{props.alert.msg}\r\n</div> }\r\n</div>\r\n)\r\n\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [text, setText] = useState(\"enable Dark Mode\");\n\n\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = ' #291a38';\n      alertstats(\"Dark mode is enabled\", \"success\");\n      setText(\"Enable light mode\");\n\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      alertstats(\"Light mode is enabled\", \"success\");\n      setText(\"Enable Dark mode\");\n    }\n  }\n\n  const alertstats = (message, type) => {\n\n    setAlert({\n      msg: message,\n      Type: type\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n\n      <Router>\n\n        <Navbar title=\"TextTiles\" mode={mode} toggleMode={toggleMode} text={text} />\n        <Alert alert={alert} />\n        <div className=\"containre my-3\">\n        <Switch>\n\n          <Route path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route path=\"/\">\n            <TextForm heading=\"Enter the text here\" mode={mode}/>\n          </Route>\n        </Switch>\n        </div>\n\n      </Router>\n      {/* always put router outside the syntex. */}\n\n    </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}